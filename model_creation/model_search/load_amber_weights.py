"""
Load `weights.json` and make a DataFrame of selection probability at convergence
FZZ, 2020.8.14
"""

import os
import json
import pandas as pd
import numpy as np


# TODO: move this to AMBER in the future
def load_and_dump_nas_action_probs(sd, od, last_n=50):
    """Load the selection probabilites from `weight_data.json` generated by AMBER search

    Parameters
    ----------
    sd : str
        filepath for Search Directory
    od : str
        filepath for Output Directory
    last_n : int
        read the last_n architectures; larger number will stabilize the probability but also might over-smooth
    """
    data = json.load(open(os.path.join(sd, "weight_data.json"), "r"))

    sum_df = pd.DataFrame(columns=["layer_id", "layer_type", "prob"])
    for i in range(len(data)):
        d = {}
        for k in data['L%i' % i]['operation']:
            if k.startswith("conv"):
                new_k = k.split("_")
                new_k.pop(1)
                new_k = "_".join(new_k)
            else:
                new_k = k
            d[new_k] = data["L%i" % i]["operation"][k][0]
            sum_df = sum_df.append({"layer_id": i, "layer_type": new_k, "prob": np.mean(d[new_k][-last_n:])},
                                   ignore_index=True)

        df = pd.DataFrame.from_dict(d)
        df.to_csv(os.path.join(od, "L%i.prob_over_time.tsv" % i), sep="\t", index=False)

    sum_df.to_csv(os.path.join(od, "selection_prob_at_convergence.tsv"), sep="\t", index=False)

    return sum_df
